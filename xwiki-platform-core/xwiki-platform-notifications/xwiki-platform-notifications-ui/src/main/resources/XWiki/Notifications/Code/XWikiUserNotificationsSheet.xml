<?xml version="1.1" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->

<xwikidoc version="1.3" reference="XWiki.Notifications.Code.XWikiUserNotificationsSheet" locale="">
  <web>XWiki.Notifications.Code</web>
  <name>XWikiUserNotificationsSheet</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <creationDate>1488292213000</creationDate>
  <parent>XWiki.Notifications.Code.WebHome</parent>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <date>1502717101000</date>
  <contentUpdateDate>1502717101000</contentUpdateDate>
  <version>1.1</version>
  <title/>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>true</hidden>
  <content>{{template name="locationPicker_macros.vm" /}}

{{velocity}}
######################################################
### CSS and JAVASCRIPTS
######################################################
#set ($discard = $xwiki.jsx.use('XWiki.Notifications.Code.XWikiUserNotificationsSheet'))
#set ($discard = $xwiki.ssx.use('XWiki.Notifications.Code.XWikiUserNotificationsSheet'))
## TODO: replace by $xwiki.sswx.use() or something like this when XWIKI-12788 is closed.
#set ($discard = $xwiki.linkx.use($services.webjars.url('bootstrap-switch', 'css/bootstrap3/bootstrap-switch.min.css'), {'type': 'text/css', 'rel': 'stylesheet'}))
######################################################
### GLOBALS
######################################################
##
## Get all event types and group them by applications
##
#set ($types = [])
#foreach ($descriptor in $services.eventstream.getRecordableEventDescriptors($xcontext.isMainWiki()))
  #set ($discard = $types.add({
    'applicationName' : "$!services.localization.render($descriptor.applicationName)",
    'applicationIcon' : "$!services.icon.renderHTML($descriptor.applicationIcon)",
    'description'     : "$!services.localization.render($descriptor.description)",
    'eventType'       : "$!descriptor.eventType",
    'filter'          : "$!descriptor.filter",
    'applicationId'   : "$!descriptor.applicationId"
  }))
#end
#set ($apps = [])
#set ($lastAppId = '')
#foreach ($type in $sorttool.sort($types, ['applicationName', 'eventType']))
  #if ($lastAppId != $type.applicationId)
    #set ($lastAppId = $type.applicationId)
    #set ($lastApp = [])
    #set ($discard = $apps.add($lastApp))
  #end
  #set ($discard = $lastApp.add($type))
#end
######################################################
### TITLE
######################################################
= $services.localization.render('notifications.settings.title') =
######################################################
### EMAIL PREFERENCES
######################################################
#if ($services.notification.areEmailsEnabled())
(% class="profile-section highlighted-profile-section notification-top-panel column half" %)
(((
  = {{translation key="notifications.settings.email.title" /}} =
  {{notificationsEmailPreferences /}}
)))
#end
######################################################
### AUTOWATCH PREFERENCES
######################################################
#if ($services.notification.watch.isEnabled())
(% class="profile-section highlighted-profile-section notification-top-panel column half" %)
(((
{{html clean="false"}}
&lt;h1&gt;$escapetool.xml($services.localization.render('notifications.settings.watch.title'))&lt;/h1&gt;
&lt;div class="notification-top-panel-preferences"&gt;
  &lt;div class="xform"&gt;
    &lt;dl&gt;
      &lt;dt class="label"&gt;&lt;label&gt;$escapetool.xml($services.localization.render('notifications.settings.watch.autowatchmode'))&lt;/label&gt;
      &lt;p class="xHint"&gt;$escapetool.xml($services.localization.render('notifications.settings.watch.autowatchmode.hint'))&lt;/p&gt;
      &lt;/dt&gt;
      &lt;dd&gt;
        #set ($mode = $services.notification.watch.automaticWatchMode)
        &lt;select class="notificationAutoWatchMode"&gt;
          &lt;option value="NONE" #if($mode == 'NONE')selected="selected"#end&gt;$escapetool.xml($services.localization.render('XWiki.Notifications.Code.AutomaticWatchModeClass_automaticWatchMode_NONE'))&lt;/option&gt;
          &lt;option value="ALL"  #if($mode == 'ALL')selected="selected"#end&gt;$escapetool.xml($services.localization.render('XWiki.Notifications.Code.AutomaticWatchModeClass_automaticWatchMode_ALL'))&lt;/option&gt;
          &lt;option value="MAJOR" #if($mode == 'MAJOR')selected="selected"#end&gt;$escapetool.xml($services.localization.render('XWiki.Notifications.Code.AutomaticWatchModeClass_automaticWatchMode_MAJOR'))&lt;/option&gt;
          &lt;option value="NEW" #if($mode == 'NEW')selected="selected"#end&gt;$escapetool.xml($services.localization.render('XWiki.Notifications.Code.AutomaticWatchModeClass_automaticWatchMode_NEW'))&lt;/option&gt;
        &lt;/select&gt;
      &lt;/dd&gt;
    &lt;/dl&gt;
  &lt;/div&gt;
&lt;/div&gt;
{{/html}}
)))
#end
######################################################
### APPLICATIONS
######################################################
(% class="profile-section highlighted-profile-section column full xform" %)
(((
{{html clean="false"}}
&lt;h1&gt;$escapetool.xml($services.localization.render('notifications.settings.applications.title'))&lt;/h1&gt;
&lt;p class="xHint"&gt;$escapetool.xml($services.localization.render('notifications.settings.applications.hint'))&lt;/p&gt;
&lt;table class="notifPreferences"&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;$escapetool.xml($services.localization.render('notifications.settings.applications.appName'))&lt;/th&gt;
      &lt;th&gt;$services.icon.renderHTML('bell') $escapetool.xml($services.localization.render('notifications.settings.menu'))
        &lt;small class="xHint"&gt;$services.localization.render('notifications.settings.menu.hint', [$services.icon.renderHTML('bell')])&lt;/small&gt;
      &lt;/th&gt;
      #set ($colsCount = 2)
      #if ($services.notification.areEmailsEnabled())
        &lt;th&gt;$services.icon.renderHTML('envelope') $escapetool.xml($services.localization.render('notifications.settings.email'))
          &lt;small class="xHint"&gt;$escapetool.xml($services.localization.render('notifications.settings.email.hint'))&lt;/small&gt;
        &lt;/th&gt;
        #set ($colsCount = 3)
      #end
      &lt;td&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  ##
  ## Display all applications
  ##
  #set ($appClass = "appOdd")
  #foreach ($app in $apps)
    #displayApp($app)
  #end
&lt;/table&gt;
{{/html}}
)))
######################################################
### FILTERS
######################################################
(% class="profile-section highlighted-profile-section filterPreferences column full" %)
(((
{{html clean="false"}}
&lt;h1&gt;$escapetool.xml($services.localization.render('notifications.settings.filters.preferences.title'))&lt;/h1&gt;
&lt;div class="xform"&gt;
  &lt;div class="row"&gt;
    &lt;p class="xHint col-xs-12 col-sm-9 col-md-8 col-lg-9"&gt;
      $escapetool.xml($services.localization.render('notifications.settings.filters.preferences.hint'))
    &lt;/p&gt;
    &lt;div class="col-xs-12 col-sm-3 col-md-4 col-lg-3 text-right"&gt;
      &lt;button type="button" class="btn btn-default btn-addfilter" data-target="#modal-add-filter-preference" data-toggle="modal"&gt;
        &lt;span class="fa fa-plus"&gt;&lt;/span&gt;&amp;nbsp;$escapetool.xml($services.localization.render('notifications.settings.addFilter'))
      &lt;/button&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  #set($collist  = ['name', 'filterType', 'eventTypes', 'notificationFormats', 'isEnabled', '_actions'])
  #set($colprops = {
    'name':                { 'sortable': false, 'html': true, 'filterable': false },
    'filterType':          { 'sortable': false, 'filterable': false },
    'eventTypes':          { 'sortable': false, 'html': true, 'filterable': false },
    'notificationFormats': { 'sortable': false, 'html': true, 'filterable': false },
    'isEnabled':           { 'sortable': false, 'html' : true, 'filterable': false },
    '_actions':            { 'sortable': false, 'actions': ['delete'], 'filterable': false}
  })
  #set($options  = {
    'resultPage'        : 'XWiki.Notifications.Code.NotificationFilterPreferenceLivetableResults',
    'rowCount'          : 10,
    'description'       : 'This table lists every filter registered for the current user.',
    'translationPrefix' : 'notifications.settings.filters.preferences.table.',
    'extraParams'       : "eventType=&amp;format=&amp;user=${services.model.serialize($doc.documentReference, 'default')}",
    'outputOnlyHtml'    : true
  })

  #livetable("notificationFilterPreferencesLiveTable" $collist $colprops $options)
&lt;/div&gt;
######################################################
### ADD FILTER MODAL
######################################################
&lt;div class="modal fade" tabindex="-1" role="dialog" id="modal-add-filter-preference"&gt;
  &lt;div class="modal-dialog" role="document"&gt;
    &lt;div class="modal-content"&gt;
      &lt;div class="modal-header"&gt;
        &lt;button type="button" class="close" data-dismiss="modal" aria-label="Close"&gt;&lt;span aria-hidden="true"&gt;&amp;times;&lt;/span&gt;&lt;/button&gt;
        &lt;h4 class="modal-title"&gt;$escapetool.xml($services.localization.render('notifications.settings.addFilter'))&lt;/h4&gt;
      &lt;/div&gt;
      &lt;div class="modal-body"&gt;
        &lt;div class="xform"&gt;
          &lt;dl class="location-picker"&gt;
            &lt;dt&gt;
              &lt;label for="notificationFilterTypeSelector"&gt;$escapetool.xml($services.localization.render('notifications.filters.type.label'))&lt;/label&gt;
              &lt;span class="xHint"&gt;$escapetool.xml($services.localization.render('notifications.filters.type.hint'))&lt;/span&gt;
            &lt;/dt&gt;
            &lt;dd&gt;
              &lt;select id="notificationFilterTypeSelector" name="notificationFilterTypeSelector" size="1"&gt;
                &lt;option value="inclusive" selected="selected"&gt;$escapetool.xml($services.localization.render('notifications.filters.preferences.addPreference.filterType.inclusive'))&lt;/option&gt;
                &lt;option value="exclusive"&gt;$escapetool.xml($services.localization.render('notifications.filters.preferences.addPreference.filterType.exclusive'))&lt;/option&gt;
              &lt;/select&gt;
            &lt;/dd&gt;
            &lt;dt&gt;
              &lt;label for="notificationFilterNotificationFormatSelector"&gt;$escapetool.xml($services.localization.render('notifications.filters.preferences.addPreference.notificationFormat.label'))&lt;/label&gt;
              &lt;span class="xHint"&gt;$escapetool.xml($services.localization.render('notifications.filters.preferences.addPreference.notificationFormat.hint'))&lt;/span&gt;
            &lt;/dt&gt;
            &lt;dd&gt;
              &lt;select id="notificationFilterNotificationFormatSelector" name="notificationFilterNotificationFormatSelector" size="2" multiple&gt;
                &lt;option value="alert" selected="selected"&gt;$escapetool.xml($services.localization.render('notifications.format.alert'))&lt;/option&gt;
                &lt;option value="email"&gt;$escapetool.xml($services.localization.render('notifications.format.email'))&lt;/option&gt;
              &lt;/select&gt;
            &lt;/dd&gt;
            &lt;dt&gt;
              &lt;label for="notificationFilterEventTypeSelector"&gt;$escapetool.xml($services.localization.render('notifications.filters.preferences.addPreference.eventType.label'))&lt;/label&gt;
              &lt;span class="xHint"&gt;$escapetool.xml($services.localization.render('notifications.filters.preferences.addPreference.eventType.hint'))&lt;/span&gt;
            &lt;/dt&gt;
            &lt;dd&gt;
              &lt;select id="notificationFilterEventTypeSelector" name="notificationFilterEventTypeSelector" size="5" multiple&gt;
                #foreach ($app in $apps)
                  #set ($type = $app[0])
                  &lt;optgroup label="$escapetool.xml($type.applicationName)"&gt;
                  #foreach($descriptor in $app)
                    &lt;option value="$escapetool.xml($descriptor.eventType)"&gt;$escapetool.xml($services.localization.render($descriptor.description))&lt;/option&gt;
                  #end
                  &lt;/optgroup&gt;
                #end
              &lt;/select&gt;
            &lt;/dd&gt;
            &lt;dt&gt;
              &lt;label&gt;$escapetool.xml($services.localization.render('notifications.filters.preferences.addPreference.location.label'))&lt;/label&gt;
              &lt;span class="xHint"&gt;$escapetool.xml($services.localization.render('notifications.filters.preferences.addPreference.location.hint'))&lt;/span&gt;
            &lt;/dt&gt;
            &lt;dd class="document-tree"&gt;
              #documentTree({
                'class': 'location-tree',
                'finder': true,
                'showAttachments': false,
                'showRoot': false,
                'showTerminalDocuments': true,
                'showTranslations': false,
                'showWikis': true
              })
            &lt;/dd&gt;
          &lt;/dl&gt;
        &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class="modal-footer"&gt;
        &lt;button type="button" class="btn btn-default" data-action="cancel" data-dismiss="modal"&gt;$services.localization.render('notifications.filters.cancel')&lt;/button&gt;
        &lt;button type="button" class="btn btn-primary" data-action="submit" disabled="disabled"&gt;$services.localization.render('notifications.filters.submit')&lt;/button&gt;
      &lt;/div&gt;
    &lt;/div&gt;&lt;!-- /.modal-content --&gt;
  &lt;/div&gt;&lt;!-- /.modal-dialog --&gt;
&lt;/div&gt;&lt;!-- /.modal --&gt;
{{/html}}
)))

#**
 * Display Application
 *#
#macro(displayApp $app)
  #set ($type = $app[0])
  &lt;tbody class="applicationElem $appClass" data-applicationid="$escapetool.xml($type.applicationId)"&gt;
    ##
    ## Display the application row
    ##
    &lt;tr&gt;
      ## Application Name and Icon
      &lt;th style="vertical-align: top;"&gt;
        $type.applicationIcon $escapetool.xml($type.applicationName)
      &lt;/th&gt;
      ## Alert switch
      &lt;td class="notificationAppCell loading" data-format="alert"&gt;
        &lt;input type="checkbox" class="notificationAppCheckbox hidden"/&gt;
      &lt;/td&gt;
      ## Email switch
      #if ($services.notification.areEmailsEnabled())
        &lt;td class="notificationAppCell loading" data-format="email"&gt;
          &lt;input type="checkbox" class="notificationAppCheckbox hidden"/&gt;
        &lt;/td&gt;
      #end
      ## Collapse button
      &lt;td class="notificationCollapseButtonCell"&gt;
        &lt;button class="btn btn-default btn-sm collapseButton"&gt;$services.icon.renderHTML('caret-down')&lt;/button&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    ##
    ## Display all events of this application
    ##
    #foreach($type in $app)
      &lt;tr class="rowEventType hidden" data-eventtype="$type.eventType"&gt;
        &lt;td&gt;$escapetool.xml($type.description)&lt;/td&gt;
        #displayPreference($type, 'alert')
        #if ($services.notification.areEmailsEnabled())
          #displayPreference($type, 'email')
        #end
        &lt;td&gt;&lt;/td&gt;
      &lt;/tr&gt;
    #end
  &lt;/tbody&gt;
  #if ($appClass == 'appOdd')
    #set ($appClass = 'appEven')
  #else
    #set ($appClass = 'appOdd')
  #end
#end

#**
 * Display a preference button for an event type and a given format
 *#
#macro(displayPreference $type $format)
  #set ($checked = '')
  #set ($preference = '')
  #foreach ($pref in $doc.getObjects('XWiki.Notifications.Code.NotificationPreferenceClass'))
    #if (($pref.getValue('format') == $format || ($format == 'alert' &amp;&amp; "$!pref.getValue('format')" == '')) &amp;&amp; $pref.getValue('eventType') == $type.eventType)
      #set ($preference = $pref)
      #if ($pref.getValue('notificationEnabled') == 1)
        #set ($checked = 'checked="checked"')
      #end
    #end
  #end
    &lt;td class="notificationTypeCell loading" data-eventtype="$!escapetool.xml($type.eventType)" data-format="$format" data-objnumber="$!preference.number" data-filter="${type.filter}"&gt;
    &lt;div class="hidden"&gt;
      &lt;input type="checkbox" class="notificationTypeCheckbox" $checked/&gt;
    &lt;/div&gt;
  &lt;/td&gt;
#end
{{/velocity}}
</content>
  <object>
    <name>XWiki.Notifications.Code.XWikiUserNotificationsSheet</name>
    <number>0</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>0f871729-5139-494d-a2ab-1ce903ff91b0</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <contenttype>PureText</contenttype>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>'use strict';
/**
 * Start the requirejs config.
 */
require.config({
  paths: {
    'bootstrap-switch': '$services.webjars.url('bootstrap-switch', 'js/bootstrap-switch.min')'
  },
  shim: {
    'bootstrap-switch' : ['jquery']
  }
});
/**
 * Start the real script.
 */
require(['jquery', 'xwiki-meta', 'ApplicationWidget', 'AddNotificationFilterPreferenceLivetable', 'bootstrap', 'bootstrap-switch', 'xwiki-events-bridge'], function ($, xm, ApplicationWidget, AddNotificationFilterPreferenceLivetable) {

  /**
   * Page initialization
   */
  $(document).ready(function() {

    var applications = [];

    // Create application widgets
    $('.applicationElem').each(function() {
      applications.push(new ApplicationWidget($(this)));
    });

    new AddNotificationFilterPreferenceLivetable($('#modal-add-filter-preference'), window['livetable_notificationFilterPreferencesLiveTable'], $('.filterPreferences button.btn-addfilter'));
    var initBootstrapSwitches = function () {
      $('#notificationFilterPreferencesLiveTable .notificationFilterPreferenceCheckbox, #notificationFilterPreferencesLiveTable .toggleableFilterPreferenceCheckbox').bootstrapSwitch({
        size: 'mini',
        labelText: '$escapetool.javascript($services.icon.renderHTML("bell"))'
      });
    };
    $(document).on('xwiki:livetable:newrow', function (event, data) {
      // Enable bootstrap switches
      initBootstrapSwitches();
    });
    initBootstrapSwitches();

    /**
     * Save the current settings
     */
    var save = function() {
      // To avoid having several requests in the same time (which could lead to error 500), we disable all the triggers during the save process
      var toggles = $('.bootstrap-switch input');
      toggles.bootstrapSwitch('disabled', true);
      var notification = new XWiki.widgets.Notification("$escapetool.javascript($services.localization.render('notifications.settings.saving'))", 'inprogress');
      var data = [];
      for (var i = 0; i &lt; applications.length; ++i) {
        for (var j = 0; j &lt; applications[i].eventTypes.length; j++) {
          data.push({
            eventType: applications[i].eventTypes[j].eventType,
            format: 'alert',
            enabled: applications[i].eventTypes[j].getAlertState()
          });
          data.push({
            eventType: applications[i].eventTypes[j].eventType,
            format: 'email',
            enabled: applications[i].eventTypes[j].getEmailState()
          });
        }
      }
      var url = "$xwiki.getURL('XWiki.Notifications.Code.NotificationPreferenceService', 'get', 'outputSyntax=plain')";
      $.post(url, {
        action: 'savePreferences',
        json: JSON.stringify(data)
      }).done(function() {
        notification.hide();
        new XWiki.widgets.Notification("$escapetool.javascript($services.localization.render('notifications.settings.saved'))", 'done');
      }).error(function() {
        notification.hide();
        new XWiki.widgets.Notification("$escapetool.javascript($services.localization.render('notifications.settings.savingfailed'))", 'error');
      }).always(function() {
        // Enable again the triggers
        toggles.bootstrapSwitch('disabled', false);
      });
    };

    /**
     * Several changes can be received very closely (for example, when several switches are updated in the same time),
     * so we save only the last received event.
     * For that we postpone the save action (300ms is clone enought for the user) and we cancel it if an other event
     * happens in the meantime.
     */
    var nextSave = 0;
    $($('.notifPreferences')).on('switchChange.bootstrapSwitch', function(event, state) {
      if (nextSave != 0) {
        clearTimeout(nextSave);
      }
      nextSave = setTimeout(save, 300);
    });

    // Disable the "loading" screens
    $('td.notificationTypeCell, td.notificationAppCell').each(function(){
      $(this).find('.hidden').removeClass('hidden');
      $(this).removeClass('loading');
    });

    /**
     * Disable the "loading" screens
     */
    $('td.notificationTypeCell').each(function(){
      $(this).find('&gt; div.hidden').removeClass('hidden');
      $(this).removeClass('loading');
    });

  });
});
</code>
    </property>
    <property>
      <name>JS</name>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>currentPage</use>
    </property>
  </object>
  <object>
    <name>XWiki.Notifications.Code.XWikiUserNotificationsSheet</name>
    <number>1</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>a0f40a59-e61d-46b0-9c37-bea6331cec7a</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <contenttype>PureText</contenttype>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>define('EventTypeWidget', ['jquery', 'xwiki-meta', 'bootstrap-switch'], function($, xm) {
  /**
  * Construct an EventTypeWidget.
  */
  return function(domElement, application) {
    var self               = this;
    self.domElement        = domElement;
    self.application       = application;
    self.eventType         = domElement.attr('data-eventtype');
    self.cellAlert         = domElement.find('.notificationTypeCell[data-format="alert"]');
    self.cellEmail         = domElement.find('.notificationTypeCell[data-format="email"]');
    self.switchAlert       = self.cellAlert.find('.notificationTypeCheckbox');
    self.switchEmail       = self.cellEmail.find('.notificationTypeCheckbox');
    self.alertObjectNumber = self.cellAlert.attr('data-objnumber');
    self.emailObjectNumber = self.cellEmail.attr('data-objnumber');

    /**
     * Initialization
     */
    self.init = function () {
      // Replace the 'hidden' class by a call to jQuery.hide();
      self.domElement.removeClass('hidden').hide();
      // Enable bootstrap switches
      $([self.switchAlert, self.switchEmail]).bootstrapSwitch({
        size: 'mini',
        labelText: '$escapetool.javascript($services.icon.renderHTML("bell"))'
      });
    };

    // On change
    $(self.switchAlert).on('switchChange.bootstrapSwitch', function(event, state) {
      self.application.updateSwitches();
      setTimeout(function() { self.save('alert', state); }, 1);
    });
    $(self.switchEmail).on('switchChange.bootstrapSwitch', function(event, state) {
      self.application.updateSwitches();
      setTimeout(function() { self.save('email', state); }, 1);
    });

    /**
     * Get the state of the alert switch
     */
    self.getAlertState = function() {
      return self.switchAlert.bootstrapSwitch('state');
    };

    /**
     * Get the state of the email switch
     */
    self.getEmailState = function() {
      return self.switchEmail.bootstrapSwitch('state');
    };

    /**
     * Set the state of the alert switch
     */
    self.setAlertState = function (state) {
      self.switchAlert.bootstrapSwitch('state', state);
    };

    /**
     * Set the state of the email switch
     */
    self.setEmailState = function (state) {
      self.switchEmail.bootstrapSwitch('state', state);
    };

    /**
     * Hide/Show the event type widget
     */
    self.toggleVisibility = function () {
      self.domElement.toggle();
    };

    // Call init
    self.init();
  };
});
</code>
    </property>
    <property>
      <name>Event Type Widget</name>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>currentPage</use>
    </property>
  </object>
  <object>
    <name>XWiki.Notifications.Code.XWikiUserNotificationsSheet</name>
    <number>2</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>d0c80940-3537-47c3-9aa8-090e7bd74b57</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <contenttype>PureText</contenttype>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>define('ApplicationWidget', ['jquery', 'EventTypeWidget', 'bootstrap-switch'], function($, EventTypeWidget) {
  /**
   * Construct an application widget.
   */
  return function(domElement) {

    var self             = this;
    self.domElement      = domElement;
    self.applicationId   = domElement.attr('data-applicationid');
    self.cellAlert       = domElement.find('.notificationAppCell[data-format="alert"]');
    self.cellEmail       = domElement.find('.notificationAppCell[data-format="email"]');
    self.switchAlert     = self.cellAlert.find('.notificationAppCheckbox');
    self.switchEmail     = self.cellEmail.find('.notificationAppCheckbox');
    self.collapseButton  = domElement.find('.collapseButton');
    self.eventTypes      = [];

    /**
     * Initialization
     */
    self.init = function () {
      // Creates event type widgets for this application
      self.domElement.find('.rowEventType').each(function() {
        self.eventTypes.push(new EventTypeWidget($(this), self));
      });
      // Enable bootstrap switch.
      $([self.switchAlert, self.switchEmail]).bootstrapSwitch({
        size: 'small',
        labelText: '$escapetool.javascript($services.icon.renderHTML("bell"))'
      });
      // Set initial state for the switches
      self.updateSwitches();
      self.updateTypesOnChange = true;
      // Handle collapsing
      self.collapseButton.click(function() {
        for (var i = 0; i &lt; self.eventTypes.length; ++i) {
          self.eventTypes[i].toggleVisibility();
        }
      });
      // Handle switch change
      self.switchAlert.on('switchChange.bootstrapSwitch', function(event, state) {
        for (var i = 0; i &lt; self.eventTypes.length; ++i) {
          self.eventTypes[i].setAlertState(state);
        }
      });
      self.switchEmail.on('switchChange.bootstrapSwitch', function(event, state) {
        for (var i = 0; i &lt; self.eventTypes.length; ++i) {
          self.eventTypes[i].setEmailState(state);
        }
      });
    };

    /**
     * Set the switch states according to their event type
     */
    self.updateSwitches = function() {
      var allAlertsOn = true;
      var allAlertsOff = true;
      var allEmailsOn = true;
      var allEmailsOff = true;
      for (var i = 0; i &lt; self.eventTypes.length; ++i) {
        var eventType = self.eventTypes[i];
        allAlertsOn  &amp;=  eventType.getAlertState();
        allAlertsOff &amp;= !eventType.getAlertState();
        allEmailsOn  &amp;=  eventType.getEmailState();
        allEmailsOff &amp;= !eventType.getEmailState();
      }
      if (allAlertsOn) {
        self.switchAlert.bootstrapSwitch('state', true);
      } else if (allAlertsOff) {
        self.switchAlert.bootstrapSwitch('state', false);
      } else {
        self.switchAlert.bootstrapSwitch('indeterminate', true);
      }
      if (allEmailsOn) {
        self.switchEmail.bootstrapSwitch('state', true);
      } else if (allEmailsOff) {
        self.switchEmail.bootstrapSwitch('state', false);
      } else {
        self.switchEmail.bootstrapSwitch('indeterminate', true);
      }
    };

    // Call to init()
    self.init();
  };
});
</code>
    </property>
    <property>
      <name>Application Widget</name>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>currentPage</use>
    </property>
  </object>
  <object>
    <name>XWiki.Notifications.Code.XWikiUserNotificationsSheet</name>
    <number>3</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>6a8f036c-8c5d-4307-8a17-fc9d732f0b79</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <contenttype>PureText</contenttype>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>define('AddNotificationFilterPreferenceLivetable', ['jquery', 'xwiki-meta', 'bootstrap'], function($, xm) {

  return function(modal, filterPreferencesLivetable, buttonAddFilter) {
    var self = this;
    self.modal = modal;
    self.filterPreferencesLivetable = filterPreferencesLivetable;
    self.buttonAddFilter = buttonAddFilter;
    self.filterTypeSelector = modal.find('select#notificationFilterTypeSelector');
    self.eventTypeSelector = modal.find('select#notificationFilterEventTypeSelector');
    self.notificationFormatSelector = modal.find('select#notificationFilterNotificationFormatSelector');
    self.filterScopeTree = modal.find('.location-tree');
    self.cancelButton = modal.find('button[data-action="cancel"]');
    self.submitButton = modal.find('button[data-action="submit"]');

    /**
     * Initialization
     */
    self.init = function () {
      self.buttonAddFilter.click(function() {
        self.filterScopeTree.xtree();
        self.submitButton.prop('disabled', 'disabled');

        self.filterScopeTree.on('changed.jstree', function(e, data) {
          if (data.selected.length &gt; 0) {
            self.submitButton.prop('disabled', '');
          }
        });
      });

      self.submitButton.click(self.onSelectButtonClicked);
    };

    /**
     * On "submit" button clicked
     */
    self.onSelectButtonClicked = function() {
      self.modal.modal('toggle');

      var tree = $.jstree.reference(self.filterScopeTree);
      var nodes = tree.get_selected(true);

      for (var i = 0; i &lt; nodes.length; ++i) {
        var node = nodes[i];

        var scopeType = 'pageOnly';
        var reference = node.data.id;
        var filterType = self.filterTypeSelector.val();
        var notificationFormats = self.notificationFormatSelector.val();
        var eventTypes = self.eventTypeSelector.val();

        var payload = {
          'className': 'XWiki.Notifications.Code.NotificationFilterPreferenceClass',
          'property#filterName': 'scopeNotificationFilter',
          'property#filterPreferenceName': Date.now(),
          'property#isEnabled': 1,
          'property#filterType': filterType,
          'property#filterFormats': notificationFormats.join(','),
          'property#eventTypes': eventTypes.join(',')
        };

        if (node.data.type == 'wiki') {
          payload['property#wikis'] = reference;
        } else if (node.data.type == 'document' &amp;&amp; node.data.id.match('WebHome$')) {
          payload['property#spaces'] = reference.substring(0, reference.length - '.WebHome'.length);
        } else {
          payload['property#pages'] = reference;
        }

        // Saving
        var notification = new XWiki.widgets.Notification("$escapetool.javascript($services.localization.render('notifications.settings.saving'))", 'inprogress');
        var restURL = xm.restURL + '/objects?media=json';
        $.post(restURL, payload).done(function (data) {
          notification.hide();
          new XWiki.widgets.Notification("$escapetool.javascript($services.localization.render('notifications.settings.saved'))", 'done');

          // Reload the livetable
          self.filterPreferencesLivetable.refresh();
        }).fail(function () {
          notification.hide();
          new XWiki.widgets.Notification("$escapetool.javascript($services.localization.render('notifications.settings.savingfailed'))", 'error');
        });
      }
    };

    // Call init()
    self.init();
  };

});
</code>
    </property>
    <property>
      <name>Add Notification Filter Preference Livetable</name>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>currentPage</use>
    </property>
  </object>
  <object>
    <name>XWiki.Notifications.Code.XWikiUserNotificationsSheet</name>
    <number>4</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>1e126b35-e7b9-4b79-a0e8-5b8f5db772ff</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <contenttype>PureText</contenttype>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>define('ToggleableFilterPreference', ['jquery', 'xwiki-meta', 'bootstrap-switch'], function($, xm) {
  /**
  * Construct the Toggleable Filter Preference object.
  */
  return function(domElement) {
    var self               = this;
    self.domElement        = $(domElement);
    /**
     * Initialization
     */
    self.init = function () {
      // On change
      self.domElement.on('switchChange.bootstrapSwitch', function(event, state) {
        setTimeout(function() { self.save(state); }, 1);
      });
    };

    /**
     * Save the filter preference
     */
    self.save = function(state) {
      var notification = new XWiki.widgets.Notification("$escapetool.javascript($services.localization.render('notifications.settings.saving'))", 'inprogress');
      var filterName = self.domElement.attr('data-filterName');
      var objectNumber = self.domElement.attr('data-objectNumber');
      if (objectNumber == '') {
        // If the object does not exist yet, create it
        var restURL = xm.restURL + '/objects?media=json';
        var params = {
          'className': 'XWiki.Notifications.Code.ToggleableFilterPreferenceClass',
          'property#filterName': filterName,
          'property#isEnabled': state ? '1' : '0'
        };
        $.post(restURL, params).done(function (data) {
          self.domElement.attr('data-objectNumber', data.number);
          notification.hide();
          new XWiki.widgets.Notification("$escapetool.javascript($services.localization.render('notifications.settings.saved'))", 'done');
        }).fail(function () {
          notification.hide();
          new XWiki.widgets.Notification("$escapetool.javascript($services.localization.render('notifications.settings.savingfailed'))", 'error');
        });
      } else if (objectNumber != '') {
        // If the object already exist, just update its value
        var restURL = xm.restURL + '/objects/XWiki.Notifications.Code.ToggleableFilterPreferenceClass/' + objectNumber
          + '/properties/isEnabled?media=json';
        $.ajax(restURL, {
          method: 'PUT',
          contentType: 'text/plain',
          data: state ? '1' : '0'
        }).done(function (data) {
          notification.hide();
          new XWiki.widgets.Notification("$escapetool.javascript($services.localization.render('notifications.settings.saved'))", 'done');
        }).fail(function () {
          notification.hide();
          new XWiki.widgets.Notification("$escapetool.javascript($services.localization.render('notifications.settings.savingfailed'))", 'error');
        });
      }
    };

    // Call init
    self.init();
  };
});
</code>
    </property>
    <property>
      <name>Toggleable Filter Preference</name>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>currentPage</use>
    </property>
  </object>
  <object>
    <name>XWiki.Notifications.Code.XWikiUserNotificationsSheet</name>
    <number>5</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>e9f94eea-e8da-4fac-98e7-c0268036118c</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <contenttype>PureText</contenttype>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>require(['jquery', 'xwiki-meta', 'ToggleableFilterPreference', 'bootstrap-switch', 'xwiki-events-bridge'], function ($, xm, ToggleableFilterPreference) {

  // Globals
  var serviceReference = XWiki.Model.resolve('XWiki.Notifications.Code.NotificationPreferenceService', XWiki.EntityType.DOCUMENT);
  var serviceURL = new XWiki.Document(serviceReference).getURL('get', 'outputSyntax=plain');

  // Callback on livetable row printing
  $(document).on('xwiki:livetable:newrow', function(event, data) {
    // Delete action
    $(data.row).find('a.actiondelete').click(function(event) {
      event.preventDefault();
      new XWiki.widgets.ConfirmationBox({
        onYes: function() {
          var notif = new XWiki.widgets.Notification("$escapetool.javascript($services.localization.render('notifications.filters.preferences.delete.inProgress'))", 'inprogress');
          $.post(serviceURL, {
            action: 'deleteFilterPreference',
            filterPreferenceName: data.data.filterPreferenceName,
            csrf: xm.form_token
          }).done(function() {
            notif.hide();
            new XWiki.widgets.Notification("$escapetool.javascript($services.localization.render('notifications.filters.preferences.delete.done'))", 'done');
            window.livetable_notificationFilterPreferencesLiveTable.refresh();
          }).fail(function() {
            notif.hide();
            new XWiki.widgets.Notification("$escapetool.javascript($services.localization.render('notifications.filters.preferences.delete.error'))", 'error');
          });
        }
      });
    });
    // Enable / Disable action for classic filter preferences
    $(data.row).find('.notificationFilterPreferenceCheckbox').on('switchChange.bootstrapSwitch', function(event, state) {
      // TODO: Translation keys
      var notif = new XWiki.widgets.Notification("$escapetool.javascript($services.localization.render('notifications.filters.preferences.setEnabled.inProgress'))", 'inprogress');
      $.post(serviceURL, {
        action: 'setFilterPreferenceEnabled',
        filterPreferenceName: data.data.filterPreferenceName,
        enabled: state,
        csrf: xm.form_token
      }).done(function() {
        notif.hide();
        new XWiki.widgets.Notification("$escapetool.javascript($services.localization.render('notifications.filters.preferences.setEnabled.done'))", 'done');
      }).fail(function() {
        notif.hide();
        new XWiki.widgets.Notification("$escapetool.javascript($services.localization.render('notifications.filters.preferences.setEnabled.error'))", 'error');
      });
    });
    // Enable / Disable action for toggleable filter preferences
    $(data.row).find('.toggleableFilterPreferenceCheckbox').each(function() {
      new ToggleableFilterPreference(this);
    });
  });

  // Initializer
  $(document).ready(function() {
    // This script is usually loaded after the livetable is displayed and so the previous callback is not called.
    // Because of that, we need
    window.livetable_notificationFilterPreferencesLiveTable.refresh();
  });
});</code>
    </property>
    <property>
      <name>Filter Preferences Livetable Callback</name>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>currentPage</use>
    </property>
  </object>
  <object>
    <name>XWiki.Notifications.Code.XWikiUserNotificationsSheet</name>
    <number>6</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>c51d89a5-6ddc-4c67-81ed-5fd8dd6385cd</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <contenttype>PureText</contenttype>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>require(['jquery', 'xwiki-meta'], function ($, xm) {

  $(document).ready(function() {
    $('.notificationAutoWatchMode').change( function (event) {
      var notification = new XWiki.widgets.Notification("$escapetool.javascript($services.localization.render('notifications.settings.saving'))", 'inprogress');
      var url = "$xwiki.getURL('XWiki.Notifications.Code.NotificationPreferenceService', 'get', 'outputSyntax=plain')";
      $.post(url, {
        action: 'setAutoWatchMode',
        mode: $(this).val(),
        csrf: xm.form_token
      }).done(function() {
        notification.hide();
        new XWiki.widgets.Notification("$escapetool.javascript($services.localization.render('notifications.settings.saved'))", 'done');
      }).error(function() {
        notification.hide();
        new XWiki.widgets.Notification("$escapetool.javascript($services.localization.render('notifications.settings.savingfailed'))", 'error');
      });
    });
  });

});</code>
    </property>
    <property>
      <name>Automatic Page Watching</name>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>currentPage</use>
    </property>
  </object>
  <object>
    <name>XWiki.Notifications.Code.XWikiUserNotificationsSheet</name>
    <number>0</number>
    <className>XWiki.StyleSheetExtension</className>
    <guid>4a8cc54d-4e11-4d29-8f2d-0b868e7e0150</guid>
    <class>
      <name>XWiki.StyleSheetExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <contenttype>PureText</contenttype>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <contentType>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>contentType</name>
        <number>6</number>
        <prettyName>Content Type</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>CSS|LESS</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </contentType>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>.notifPreferences tbody {
  margin-top: 2em;
}
.notifPreferences .appOdd {
  background: #e5e5e5;
}
.notifPreferences .appEven {
  background: #fafafa;
}
.notifPreferences .rowApp td, .notifPreferences .rowApp th{
  height: 3em;
}
.notifPreferences th:nth-child(1) {
  vertical-align: top;
  width: 250px;
}
.notificationAppCell {
  vertical-align: top;
  width: 33%;
}
.notificationCollapseButtonCell {
  vertical-align: top;
  text-align: right;
}</code>
    </property>
    <property>
      <contentType>CSS</contentType>
    </property>
    <property>
      <name>NotificationPreferencesTable</name>
    </property>
    <property>
      <parse/>
    </property>
    <property>
      <use>currentPage</use>
    </property>
  </object>
  <object>
    <name>XWiki.Notifications.Code.XWikiUserNotificationsSheet</name>
    <number>1</number>
    <className>XWiki.StyleSheetExtension</className>
    <guid>d5a3452c-09c6-4a49-b6bf-290528cd27f0</guid>
    <class>
      <name>XWiki.StyleSheetExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <contenttype>PureText</contenttype>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <contentType>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>contentType</name>
        <number>6</number>
        <prettyName>Content Type</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>CSS|LESS</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </contentType>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>.notification-top-panel-preferences {
  display: inline-block;
  width: 100%;
}</code>
    </property>
    <property>
      <contentType>CSS</contentType>
    </property>
    <property>
      <name>NotificationPreferencesTopPanel</name>
    </property>
    <property>
      <parse/>
    </property>
    <property>
      <use>currentPage</use>
    </property>
  </object>
  <object>
    <name>XWiki.Notifications.Code.XWikiUserNotificationsSheet</name>
    <number>2</number>
    <className>XWiki.StyleSheetExtension</className>
    <guid>0b577f22-3c27-4365-a965-29605ca5886d</guid>
    <class>
      <name>XWiki.StyleSheetExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <contenttype>PureText</contenttype>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <contentType>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>contentType</name>
        <number>6</number>
        <prettyName>Content Type</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>CSS|LESS</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </contentType>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>#notificationFilterPreferencesLiveTable select.pagesizeselect {
  width: auto;
}</code>
    </property>
    <property>
      <contentType>CSS</contentType>
    </property>
    <property>
      <name>NotificationFilterPreferences</name>
    </property>
    <property>
      <parse/>
    </property>
    <property>
      <use>currentPage</use>
    </property>
  </object>
</xwikidoc>
