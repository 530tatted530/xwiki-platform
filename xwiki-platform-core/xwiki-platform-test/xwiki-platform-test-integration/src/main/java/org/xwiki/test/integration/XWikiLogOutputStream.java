/*
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
 */
package org.xwiki.test.integration;

import org.apache.commons.exec.LogOutputStream;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import ch.qos.logback.core.ConsoleAppender;
import ch.qos.logback.core.encoder.EchoEncoder;

/**
 * Logs the stdout and stderr streams of an external process started using Commons Exec.
 *
 * @version $Id$
 * @since 4.3.1
 */
public class XWikiLogOutputStream extends LogOutputStream
{
    /**
     * The logger to use logs generated by the XWiki process. Note that we need a logger that starts with
     * "org.xwiki" since by default we configure logging for "org.xwiki" to be at INFO level which isn't the case for
     * other loggers and thus we wouldn't log all output if we were using another logger!
     */
    private static final Logger LOGGER = LoggerFactory.getLogger(XWikiLogOutputStream.class);

    private int lastLevelUsed;

    public XWikiLogOutputStream()
    {
        /*
        ch.qos.logback.classic.Logger logger =
            (ch.qos.logback.classic.Logger) LoggerFactory.getLogger(ch.qos.logback.classic.Logger.ROOT_LOGGER_NAME);
        ConsoleAppender consoleAppender = (ConsoleAppender) logger.getAppender("stdout");
        consoleAppender.setEncoder(new EchoEncoder());
        */
    }

    @Override
    protected void processLine(String line, int level)
    {
        // Try to use the right logger method depending on the line content.
        if (line.contains("ERROR")) {
            this.lastLevelUsed = 0;
        } else if (line.contains("WARN")) {
            this.lastLevelUsed = 1;
        } else if (line.contains("INFO")) {
            this.lastLevelUsed = 2;
        } else {
            // Use the last level at which we logged.
        }
        log(line);
    }

    private void log(String line)
    {
        if (this.lastLevelUsed == 0) {
            LOGGER.error(line);
        } else if (this.lastLevelUsed == 1) {
            LOGGER.warn(line);
        } else {
            LOGGER.info(line);
        }
    }
}
